// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Admin {
    id        String   @id @default(uuid())
    firstName String
    lastName  String
    email     String
    username  String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Department {
    id          Int      @id @default(autoincrement())
    code        String   @unique
    title       String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Course      Course[]
}

model Course {
    code          String     @id
    title         String
    departmenCode String
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    Department    Department @relation(fields: [departmenCode], references: [code])
    Students      Students[]

    Theses Theses[]
}

model Students {
    id            String        @id @default(uuid())
    courseCode    String
    studentId     String        @unique
    email         String?       
    password      String
    firstName     String
    middleName    String?
    lastName      String
    gender        StudentGender
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    Course        Course?       @relation(fields: [courseCode], references: [code])

    Reviews  ThesesReviews[]
    Comments ThesesComments[]
}

model Theses {
    id          String           @id @default(uuid())
    courseCode  String
    thesisPhoto String
    abstract    String
    title       String
    members     String
    year        DateTime
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    Course      Course           @relation(fields: [courseCode], references: [code])
    Tags        ThesesTags[]
    Reviews     ThesesReviews[]
    Comments    ThesesComments[]
}

model Tags {
    id        Int          @id @default(autoincrement())
    tag       String
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    Theses    ThesesTags[]
}

model ThesesTags {
    thesisId String
    tagId    Int
    Thesis   Theses @relation(fields: [thesisId], references: [id])
    Tag      Tags   @relation(fields: [tagId], references: [id])

    @@id([thesisId, tagId])
}

model ThesesReviews {
    stars     Int
    studentId String
    thesisId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Thesis    Theses   @relation(fields: [thesisId], references: [id])
    Student   Students @relation(fields: [studentId], references: [id])

    @@id([thesisId, studentId])
}

model ThesesComments {
    id        Int      @id @default(autoincrement())
    stars     Int
    studentId String
    thesisId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Thesis    Theses   @relation(fields: [thesisId], references: [id])
    Student   Students @relation(fields: [studentId], references: [id])
}

enum StudentGender {
    MALE
    FEMALE
}
