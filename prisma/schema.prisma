// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Admin {
    id                      String                 @id @default(uuid())
    firstName               String
    lastName                String
    borrowDueDateSettingsId String?                @unique
    borrowLimitSettingsId   String?                @unique
    email                   String
    username                String                 @unique
    password                String
    createdAt               DateTime               @default(now())
    updatedAt               DateTime               @updatedAt
    BorrowDueDateSettings   BorrowDueDateSettings?
    BorrowLimitSettings     BorrowLimitSettings?
}

model BorrowDueDateSettings {
    adminId   String   @id @unique
    dayCount  Int      @default(3)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Admin     Admin?   @relation(fields: [adminId], references: [id])
}

model BorrowLimitSettings {
    adminId    String   @id @unique
    limitCount Int      @default(2)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    Admin      Admin?   @relation(fields: [adminId], references: [id])
}

model Department {
    id          Int      @id @default(autoincrement())
    code        String   @unique
    title       String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Course      Course[]
}

model Course {
    code          String     @id
    title         String
    departmenCode String
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    Department    Department @relation(fields: [departmenCode], references: [code])
    Students      Students[]

    Theses Theses[]
}

model Students {
    id         String        @id @default(uuid())
    courseCode String
    studentId  String        @unique
    email      String?
    password   String
    firstName  String
    middleName String?
    lastName   String
    year       Int           @default(1)
    section    String        @default("")
    contactNo  String?       @default("")
    gender     StudentGender
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    Course     Course?       @relation(fields: [courseCode], references: [code])

    Ratings  ThesesRatings[]
    Comments ThesesComments[]

    Bag     StudentBag[]
    Borrows StudentBorrow[]
}

model StudentBag {
    studentId String
    thesisId  String
    Thesis    Theses   @relation(fields: [thesisId], references: [id])
    Student   Students @relation(fields: [studentId], references: [id])
    createdAt DateTime @default(now())

    @@id([studentId, thesisId])
}

model StudentBorrow {
    id            Int                 @id @default(autoincrement())
    studentId     String
    thesisId      String
    status        StudentBorrowStatus @default(PENDING)
    Thesis        Theses              @relation(fields: [thesisId], references: [id])
    Student       Students            @relation(fields: [studentId], references: [id])
    isPenalty     Boolean             @default(false)
    penaltyIsPaid Boolean             @default(false)
    borrowedAt    DateTime?
    borrowDueAt   DateTime? //Due date of borrow
    returnedAt    DateTime?
    updatedAt     DateTime            @updatedAt
    createdAt     DateTime            @default(now())
}

model Theses {
    id          String           @id @default(uuid())
    courseCode  String
    thesisPhoto String
    abstract    String
    title       String
    members     String
    quantity    Int              @default(1)
    available   Int              @default(1)
    isAvailable Boolean          @default(true)
    year        DateTime
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    Course      Course           @relation(fields: [courseCode], references: [code])
    Tags        ThesesTags[]
    Ratings     ThesesRatings[]
    Comments    ThesesComments[]

    StudentBag     StudentBag[]
    StudentBorrows StudentBorrow[]
}

model Tags {
    id        Int          @id @default(autoincrement())
    tag       String
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    Theses    ThesesTags[]
}

model ThesesTags {
    thesisId String
    tagId    Int
    Thesis   Theses @relation(fields: [thesisId], references: [id])
    Tag      Tags   @relation(fields: [tagId], references: [id])

    @@id([thesisId, tagId])
}

model ThesesRatings {
    stars     Int
    studentId String
    thesisId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Thesis    Theses   @relation(fields: [thesisId], references: [id])
    Student   Students @relation(fields: [studentId], references: [id])

    @@id([thesisId, studentId])
}

model ThesesComments {
    id        Int      @id @default(autoincrement())
    stars     Int
    studentId String
    thesisId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Thesis    Theses   @relation(fields: [thesisId], references: [id])
    Student   Students @relation(fields: [studentId], references: [id])
}

enum StudentGender {
    MALE
    FEMALE
}

enum StudentBorrowStatus {
    PENDING
    BORROWED
    RETURNED
    CANCELLED
}
